// start undo group{    app.beginUndoGroup("update c4d files");// Global variablesvar regVersionPat = /[_v]+[0-9]{1,}/ig;  // RegEx for versionvar regPatToReplace = /((_v)+([0-9]){1,})/ig;// pattern for any Versionvar versionsArray=new Array;var currentVersionIndex = 0;/*check if selectedItem is Folder or FootageItem. var curFolder = app.project.activeItem;var selectedItems = app.project.selection;var listItems = curFolder.items; // list of eleements in foldervar itemObj = getItemVersions (listItems[1]);alert(itemObj);var firstFile = File (listItems[1].mainSource.file); // firstFile in Foldervar rootFolder = firstFile.parent.parent; // Renders parent foldervar listOfVersion = rootFolder.getFiles(); // get list of render folderslistOfVersion = listOfVersion.splice (1,listOfVersion.length); // remove .dstore file// find currentVersion of filevar fileName = firstFile.displayName;var regText = fileName.search(regVersionPat);var currentVersion = fileName.slice(regText+2,regText+4);var currentVersionNumber = parseInt (currentVersion);*///UI definitionvar win = new Window("palette","update seq",[0,0,140,120],{resizeable:true,});    panel_1=win.add("panel",[0,0,140,120],"update sequences");    //panel_1.graphics.backgroundColor = panel_1.graphics.newBrush (panel_1.graphics.BrushType.SOLID_COLOR,[0.25,0.25,0.25]);    folderCheck=panel_1.add("checkbox",[10,15,120,35],"all files in folder");    folderCheck.value=0;    firstButton=panel_1.add("button",[10,40,35,65],"--");    oneDownButton=panel_1.add("button",[40,40,65,65],"-");    latestButton=panel_1.add("button",[100,40,125,65],"++");    oneUpButton=panel_1.add("button",[70,40,95,65],"+");    //scanButton=panel_1.add("button",[10,70,125,90],"scan for new version");    win.center();    win.show();// end undo groupapp.endUndoGroup();}//FUNCTIONS// UI functionsoneUpButton.onClick = function(){       var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = getItemVersions(selected);            nextVersion (firstObj);            }        else if(folderCheck.value ==1){             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = getItemVersions(folderItems[i]);                nextVersion (firstObj);                }            }    }    oneDownButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = getItemVersions(selected);            previousVersion(firstObj);            }        else if(folderCheck.value ==1){             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = getItemVersions(folderItems[i]);                 previousVersion(firstObj);                }            }    }    latestButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = getItemVersions(selected);            lastVersion(firstObj);            }        else if(folderCheck.value ==1){             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = getItemVersions(folderItems[i]);                 lastVersion(firstObj);                }            }    	}    firstButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = getItemVersions(selected);            firstVersion(firstObj);            }        else if(folderCheck.value ==1){             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = getItemVersions(folderItems[i]);                 firstVersion(firstObj);                }            }    }// OP FUNCTIONSfunction checkCurrentIndex(currentIndex){    if(currentIndex <= 0 || currentIndex == versionsArray.length-1){        return true;        }     else{         return false;         }}function getItemVersions(theItem){        var itemFile = File (theItem.mainSource.file);    var itemObj={};    var itemId = theItem.id;    itemObj["item"]=theItem;       var rootFolder = itemFile.parent.parent; // Renders parent folder    var listOfVersion = rootFolder.getFiles(); // get list of render folders    listOfVersion = listOfVersion.splice (1,listOfVersion.length); // remove .dstore file    var fileName = itemFile.displayName;    var regText = fileName.search(regVersionPat);    var currentVersion = fileName.slice(regText+2,regText+4);    var fileStr = itemFile.toString();    var currentVersionNumber = parseInt (currentVersion);        for(var i=0 ; i< listOfVersion.length ; i++){           var thisVersion = listOfVersion[i].toString().slice(listOfVersion[i].toString().length-2,listOfVersion[i].toString().length);           newFileString = fileStr.replace(regPatToReplace, "_v"+thisVersion);           var newFilePass = File (newFileString);           itemObj[thisVersion]= newFilePass;           }        itemObj["currentVersion"]=currentVersion;                return itemObj;}// change to next Versionfunction nextVersion(theItemObj){    var versionList=new Array;    // create verisons array    for(var i in theItemObj){       if((theItemObj[i] instanceof File)) {        versionList.push(i); // alerts key        }    }    var thisVersion = theItemObj.currentVersion;    var currentIndex = findById(versionList, thisVersion);        if(currentIndex < versionList.length-1){        var nextIndex = currentIndex+1;        var newVal = versionList[nextIndex];        replaceFileName (theItemObj, theItemObj[newVal]);        theItemObj.currentVersion = versionList[currentIndex+1];    }    else{        alert("No newest version available");        }}// change to previous versionfunction previousVersion(theItemObj){    var versionList=new Array;    // create verisons array    for(var i in theItemObj){       if((theItemObj[i] instanceof File)) {        versionList.push(i); // alerts key        }    }    var thisVersion = theItemObj.currentVersion;    var currentIndex = findById(versionList, thisVersion);        if(currentIndex > 0){        var nextIndex = currentIndex-1;        var newVal = versionList[nextIndex];        replaceFileName (theItemObj, theItemObj[newVal]);        theItemObj.currentVersion = versionList[currentIndex-1];    }    else{        alert("No newest version available");        }}// change to last versionfunction lastVersion(theItemObj){    var versionList=new Array;    // create verisons array    for(var i in theItemObj){       if((theItemObj[i] instanceof File)) {        versionList.push(i); // alerts key        }    }    var thisVersion = theItemObj.currentVersion;    var newVal = versionList[versionList.length-1];        replaceFileName (theItemObj, theItemObj[newVal]);        theItemObj.currentVersion = versionList[versionList.length-1];}// change to first versionfunction firstVersion(theItemObj){    var versionList=new Array;    // create verisons array    for(var i in theItemObj){       if((theItemObj[i] instanceof File)) {        versionList.push(i); // alerts key        }    }    var thisVersion = theItemObj.currentVersion;        var newVal = versionList[0];        replaceFileName (theItemObj, theItemObj[newVal]);        theItemObj.currentVersion = versionList[0];}function replaceFileName (objToUpdate,chosenFile){       objToUpdate.item.replaceWithSequence(chosenFile,false);           }function findById(source, id) {  for (var i = 0; i < source.length; i++) {    if (source[i] === id) {      return i;    }  }}