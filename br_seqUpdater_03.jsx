// start undo group{    app.beginUndoGroup("update c4d files");// Global variablesvar regVersionPat = /[_v]+[0-9]{1,}/ig;  // RegEx for versionvar regPatToReplace = /((_v)+([0-9]){1,})/ig;// pattern for any Versionvar versionsArray=new Array;var currentVersionIndex = 0;//UI definitionvar win = new Window("palette","update seq",[0,0,140,120],{resizeable:true,});    panel_1=win.add("panel",[0,0,140,120],"update sequences");    //panel_1.graphics.backgroundColor = panel_1.graphics.newBrush (panel_1.graphics.BrushType.SOLID_COLOR,[0.25,0.25,0.25]);    folderCheck=panel_1.add("checkbox",[10,15,120,35],"all files in folder");    folderCheck.value=0;    firstButton=panel_1.add("button",[10,40,35,65],"--");    oneDownButton=panel_1.add("button",[40,40,65,65],"-");    latestButton=panel_1.add("button",[100,40,125,65],"++");    oneUpButton=panel_1.add("button",[70,40,95,65],"+");    //scanButton=panel_1.add("button",[10,70,125,90],"scan for new version");    win.center();    win.show();//FUNCTIONS// UI functions    oneUpButton.onClick = function(){       var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = checkExt(selected);            nextVersion (firstObj);            alert(firstObj.item.file.displayName + "is now version  " + firstObj.currentVersion,"Update Report");            }        else if(folderCheck.value ==1){            var stringAlertArray = new Array;             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                 var firstObj = checkExt(folderItems[i]);                nextVersion (firstObj);                var thisStr = firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion +"\n";                stringAlertArray.push(thisStr);                }                alert(stringAlertArray);            }    }    oneDownButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = checkExt(selected);            previousVersion(firstObj);            alert(firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion,"Update Report");            }        else if(folderCheck.value ==1){            var stringAlertArray = new Array;             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = checkExt(folderItems[i]);                 previousVersion(firstObj);                 var thisStr = firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion +"\n";                stringAlertArray.push(thisStr);                }            alert(stringAlertArray,"Update Report");            }    }    latestButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = checkExt(selected);            lastVersion(firstObj);            alert(firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion,"Update Report");            }        else if(folderCheck.value ==1){            var stringAlertArray = new Array;             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = checkExt(folderItems[i]);                 lastVersion(firstObj);                 var thisStr = firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion +"\n";                stringAlertArray.push(thisStr);                }            alert(stringAlertArray,"Update Report");            }    	}    firstButton.onClick = function(){        var selection = app.project.selection;       var selected = selection[0];        if(folderCheck.value ==0){            if (selection.length<=1){                var selected = selection[0];            }            var firstObj = checkExt(selected);            firstVersion(firstObj);            alert(firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion,"Update Report");            }        else if(folderCheck.value ==1){            var stringAlertArray = new Array;             var curFolder = selected.parentFolder;             var folderItems = curFolder.items;             for(i=1;i<= folderItems.length;i++){                var firstObj = checkExt(folderItems[i]);                 firstVersion(firstObj);                 var thisStr = firstObj.item.file.displayName + " is now version  " + firstObj.currentVersion +"\n";                stringAlertArray.push(thisStr);                }            alert(stringAlertArray,"Update Report");            }    }app.endUndoGroup();// OP FUNCTIONS    function getItemVersions(theItem){                        var itemObj={};            var itemId = theItem.id;            itemObj["item"]=theItem;            var itemFile = File (theItem.mainSource.file); // firstFile in Folder            var fileStr = itemFile.toString();            var rootFolder = itemFile.parent; // Renders parent folder            var listOfVersion = rootFolder.getFiles(); // get list of render folders            // listOfVersion = listOfVersion.splice (0,listOfVersion.length); // remove .dstore file            // find currentVersion of file            var fileName = itemFile.displayName;            var regText = fileStr.search(regVersionPat);            var currentVersion = fileStr.slice(regText+2,regText+4);            var currentVersionNumber = parseInt (currentVersion);            var versionArray = new Array;            var filesArray = new Array;           for(var i=0 ; i< listOfVersion.length ; i++){               var thisVersion = listOfVersion[i].toString().slice(regText+2,regText+4);               itemObj[thisVersion]= listOfVersion[i];               }            itemObj["currentVersion"]=currentVersion;           // itemObj["versions"] = versionArray;           // itemObj["files"] = filesArray;            return itemObj;                   }    function getSeqItemVersions(theItem){                var itemFile = File (theItem.mainSource.file);        var itemObj={};        var itemId = theItem.id;        itemObj["item"]=theItem;               var rootFolder = itemFile.parent.parent; // Renders parent folder        var listOfVersion = rootFolder.getFiles(); // get list of render folders        listOfVersion = listOfVersion.splice (1,listOfVersion.length); // remove .dstore file        var fileName = itemFile.displayName;        var regText = fileName.search(regVersionPat);        var currentVersion = fileName.slice(regText+2,regText+4);        var fileStr = itemFile.toString();        var currentVersionNumber = parseInt (currentVersion);                for(var i=0 ; i< listOfVersion.length ; i++){               var thisVersion = listOfVersion[i].toString().slice(listOfVersion[i].toString().length-2,listOfVersion[i].toString().length);               newFileString = fileStr.replace(regPatToReplace, "_v"+thisVersion);               var newFilePass = File (newFileString);                if (newFilePass.exists){                    itemObj[thisVersion]= newFilePass;                    }                                             }            itemObj["currentVersion"]=currentVersion;                        return itemObj;    }// change to next Version    function nextVersion(theItemObj){        var versionList=new Array;        // create verisons array        for(var i in theItemObj){           if((theItemObj[i] instanceof File)) {            versionList.push(i); // alerts key            }        }        var thisVersion = theItemObj.currentVersion;        var currentIndex = findById(versionList, thisVersion);                if(currentIndex < versionList.length-1){            var nextIndex = currentIndex+1;            var newVal = versionList[nextIndex];            if(theItemObj.mov == true){                replaceFileName (theItemObj, theItemObj[newVal]);                }            else{            replaceSeqFileName (theItemObj, theItemObj[newVal]);            }            theItemObj.currentVersion = versionList[currentIndex+1];        }        else{           // alert(theItemObj.item.file.displayName +" is already the latest version available");            }    }// change to previous version    function previousVersion(theItemObj){        var versionList=new Array;        // create verisons array        for(var i in theItemObj){           if((theItemObj[i] instanceof File)) {            versionList.push(i); // alerts key            }        }        var thisVersion = theItemObj.currentVersion;        var currentIndex = findById(versionList, thisVersion);                if(currentIndex > 0){            var nextIndex = currentIndex-1;            var newVal = versionList[nextIndex];            if(theItemObj.mov == true){                replaceFileName (theItemObj, theItemObj[newVal]);                }            else{            replaceSeqFileName (theItemObj, theItemObj[newVal]);            }            theItemObj.currentVersion = versionList[currentIndex-1];        }        else{           // alert(theItemObj.item.file.displayName + " is already the first version available");            }    }// change to last version    function lastVersion(theItemObj){        var versionList=new Array;        // create verisons array        for(var i in theItemObj){           if((theItemObj[i] instanceof File)) {            versionList.push(i); // alerts key            }        }        var thisVersion = theItemObj.currentVersion;                var newVal = versionList[versionList.length-1];        if(theItemObj.mov == true){                replaceFileName (theItemObj, theItemObj[newVal]);                }            else{            replaceSeqFileName (theItemObj, theItemObj[newVal]);            }                        theItemObj.currentVersion = versionList[versionList.length-1];    }// change to first version    function firstVersion(theItemObj){        var versionList=new Array;        // create verisons array        for(var i in theItemObj){           if((theItemObj[i] instanceof File)) {            versionList.push(i); // alerts key            }        }        var newVal = versionList[0];                   if(theItemObj.mov == true){                replaceFileName (theItemObj, theItemObj[newVal]);                }            else{            replaceSeqFileName (theItemObj, theItemObj[newVal]);            }                        theItemObj.currentVersion = versionList[0];    }        function replaceFileName (objToUpdate,chosenFile){                var newFilePass = File (chosenFile);               objToUpdate.item.replace(newFilePass);    }    function replaceSeqFileName (objToUpdate,chosenFile){             objToUpdate.item.replaceWithSequence(chosenFile,false);    }    function findById(source, id) {        for (var i = 0; i < source.length; i++) {            if (source[i] === id) {                return i;            }        }    }    function checkExt(item){         var itemFile = item.file;         var itemObj ={};         var itemFileStr = itemFile.toString();         var ext = itemFileStr.substr(itemFileStr.lastIndexOf('.') + 1);            switch (ext){                case "mov":                     itemObj = getItemVersions(item);                     itemObj["mov"]=true;                     break;               default :                    itemObj = getSeqItemVersions(item);                    itemObj["mov"]=false;                }                return itemObj;     }// end undo group}