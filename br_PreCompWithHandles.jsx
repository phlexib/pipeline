{app.beginUndoGroup("Precompose");  var shotsArray=[];//var firstArray = groupLayers(app.project.activeItem);groupLayers(app.project.activeItem,app.project.activeItem.layers.length);makeIt(app.project.activeItem,shotsArray); app.endUndoGroup();  // PRECOMPOSE A GROUP OF LAYERfunction precompShots(myComp,indexes,shotName){       if(myComp == null){        alert("Please, select your composition"); return false;    }           if(indexes <1 ){        alert("Layer Group is EMpty"); return false;    }    var myLayers = indexes;      // precomp function works only with layers indexes, so array should contain layers indexes      var compFrameDuration = myComp.frameDuration;    var handles = compFrameDuration*12;        var precompIndices = myLayers;  //change this to customize      var precompName = shotName;  //change this to customize      var preCompDuration = myComp.layer(myLayers[0]).outPoint - myComp.layer(myLayers[0]).inPoint+(handles*2);    var inPoint = myComp.layer(myLayers[0]).inPoint;      var outPoint = myComp.layer(myLayers[0]).outPoint;      var startTime =  myComp.layer(myLayers[0]).startTime;     var precomp = myComp.layers.precompose(precompIndices, precompName, true);    //precomp.duration = preCompDuration;            //myComp.layer(precompName).startTime = startTime;    precomp.duration += (handles*2);    precomp.workAreaStart = inPoint-handles;    precomp.workAreaDuration = outPoint - inPoint +(handles*2);    precomp.openInViewer();    app.executeCommand(2360);    precomp.displayStartTime = 0;    precomp.workAreaStart = handles;    precomp.workAreaDuration -= handles;    myComp.layer(precompName).inPoint = inPoint;     myComp.layer(precompName).startTime = inPoint-handles;    myComp.layer(precompName).inPoint = inPoint;     myComp.layer(precompName).outPoint = outPoint;         rqPreset(precomp,"location");                 writeLn("Done!");  }// CREATE GROUPS BASED ON TIME --> ARRAY OF INDEX OF LAYERS TO PRECOMPfunction groupLayers(myComp,startIndex){        var layers = myComp.layers;    var refLayer = myComp.layer(startIndex);    var refInPoint = refLayer.inPoint;    var refOutPoint = refLayer.outPoint;    var groupArray = new Array;    groupArray.push(refLayer.index);    alert(refInPoint);    for (l=refLayer.index-1; l>=1; l--){        var curLayerInPoint = layers[l].inPoint;         var curLayerOutPoint = layers[l].outPoint;         if((curLayerInPoint >= refInPoint)&&(curLayerOutPoint <= refOutPoint)){            groupArray.push(layers[l].index);            if(l==1){                shotsArray.push(groupArray);            }        }else {            shotsArray.push(groupArray);            groupLayers(myComp,l);        }           }}function rqPreset(shotComp){    var rqItems = app.project.renderQueue.items;    var newItem = rqItems.add(shotComp);    newItem.timeSpanStart = shotComp.workAreaStart;    newItem.timeSpanDuration = shotComp.workAreaDuration;    var outputName = shotComp.name+"_v01";    var projectPath = app.project.file;    var tempPath = app.project.file.parent.parent.parent.fsName+"/05_footage/02_graphics_renders/";    createFolder(tempPath,shotComp.name);    var renderPath = app.project.file.parent.parent.parent.fsName+"/05_footage/02_graphics_renders/"+shotComp.name+"/";    var renderFile = new File(renderPath+outputName);        var om = newItem.outputModule(1);    om.file = renderFile;}function makeIt(myComp,shotsArray){    var shotCounter = 10;    var increment = 10;    var padding = 3;    for(i=0;i<shotsArray.length;i++){        var shotPadded = pad(shotCounter,padding);        var shotName = "s"+shotPadded;        var grpObject = {};        grpObject["name"]=shotName;        grpObject["indexList"]=shotsArray[i];        shotCounter = shotCounter + increment;        precompShots(myComp,grpObject["indexList"],grpObject["name"]);    }}// GENERIC FUUNCTIONSfunction pad(num, size) {    var s = num+"";    while (s.length < size) s = "0" + s;    return s;}Array.prototype.contains = function(elem){for (var i in this){if (this[i] == elem) return true;}return false;}}function createFolder(path,fName){        var f= new Folder(path+fName+"/");        if (!f.exists)        f.create();    }