{app.beginUndoGroup("Precompose");  var timeArray = countMarkers();var shotsArray = groupLayers(app.project.activeItem,app.project.activeItem.layers.length,timeArray);alert(shotsArray);makeIt(app.project.activeItem,shotsArray); app.endUndoGroup();  // PRECOMPOSE A GROUP OF LAYERfunction precompShots(myComp,inPoint,outPoint,indexes,shotName){      //var inPoint = indexes.inP;    //var outPoint = indexes.outP;    var myLayers = indexes;    if(myComp == null){        alert("Please, select your composition"); return false;    }           if(indexes <1 ){        alert("Layer Group is EMpty"); return false;    }        var compFrameDuration = myComp.frameDuration;    var handles = compFrameDuration*12;        var precompIndices = myLayers;  //change this to customize      var precompName = shotName;  //change this to customize      var preCompDuration = outPoint - inPoint+(handles*2);    alert(precompIndices);    //var inPoint = myComp.layer(myLayers[0]).inPoint;      //var outPoint = myComp.layer(myLayers[0]).outPoint;      //var startTime =  myComp.layer(myLayers[0]).startTime;     var precomp = myComp.layers.precompose(precompIndices, precompName, true);    //precomp.duration = preCompDuration;            //myComp.layer(precompName).startTime = startTime;    precomp.duration += (handles*2);    precomp.workAreaStart = inPoint-handles;    precomp.workAreaDuration = outPoint - inPoint +(handles*2);    precomp.openInViewer();    app.executeCommand(2360);    precomp.displayStartTime = 0;    precomp.workAreaStart = handles;    precomp.workAreaDuration -= handles;    myComp.layer(precompName).inPoint = inPoint;     myComp.layer(precompName).startTime = inPoint-handles;    myComp.layer(precompName).inPoint = inPoint;     myComp.layer(precompName).outPoint = outPoint;         rqPreset(precomp,"location");                 writeLn("Done!");  }// CREATE GROUPS BASED ON TIME --> ARRAY OF INDEX OF LAYERS TO PRECOMPfunction groupLayers(myComp,startIndex,timeArray){    var currentIndex = startIndex;    var layers = myComp.layers;    //var refInPoint = refLayer.inPoint;    //var refOutPoint = refLayer.outPoint;    var blocArray = new Array;    for (t=0; t<timeArray.length-1;t++){        var groupObj ={};        var refInPoint = timeArray[t];        var refOutPoint = timeArray[t+1];        groupObj["inP"]= refInPoint;        groupObj["outP"]= refOutPoint;        var groupArray = new Array;                    //groupArray.push(refLayer.index);            for (var l=currentIndex; l>1; l--){        var curLayerInPoint = layers[l].inPoint;         var curLayerOutPoint = layers[l].outPoint;        if((curLayerInPoint < refOutPoint)){            groupArray.push(layers[l].index);                     }else{            currentIndex =l;            break;            }    }     groupObj["indexes"]=groupArray;    blocArray.push(groupObj);    }return blocArray;}function rqPreset(shotComp){    var rqItems = app.project.renderQueue.items;    var newItem = rqItems.add(shotComp);    newItem.timeSpanStart = shotComp.workAreaStart;    newItem.timeSpanDuration = shotComp.workAreaDuration;    var outputName = shotComp.name+"_v01";    var projectPath = app.project.file;    var tempPath = app.project.file.parent.parent.parent.fsName+"/05_footage/02_graphics_renders/";    createFolder(tempPath,shotComp.name);    var renderPath = app.project.file.parent.parent.parent.fsName+"/05_footage/02_graphics_renders/"+shotComp.name+"/";    var renderFile = new File(renderPath+outputName);        var om = newItem.outputModule(1);    om.file = renderFile;}function makeIt(myComp,shotsArray){    var shotCounter = 10;    var increment = 10;    var padding = 3;    for(i=0;i<shotsArray.length;i++){        var shotPadded = pad(shotCounter,padding);        var shotName = "s"+shotPadded;        //var grpObject = {};        //shotsArray[i]["name"]=shotName;        //grpObject["list"]=shotsArray[i];        shotCounter = shotCounter + increment;       precompShots(myComp,shotsArray[i].inP,shotsArray[i].outP,shotsArray[i].indexes,shotName);    }}function countMarkers(){    var comp = app.project.activeItem;    var layer = app.project.activeItem.layer(1);    var markersTime = new Array;    var markerProps = layer.property("Marker");    if(layer.property("marker").numKeys==null){    alert("There are no Markers in this layer!"); }else{            for (var i = 1; i <= markerProps.numKeys; i++)					{						marker = new Object;						marker.time = markerProps.keyTime(i);						marker.value = markerProps.keyValue(i);							adjustedMarkerTime = marker.time + 0.0005;		// Add a slop factor; seems necessary with fractional frame rates						if ((adjustedMarkerTime % comp.frameDuration) > 0.001){	// Adjust for markers not on frame boundaries; match timecode in Marker dialog box							adjustedMarkerTime += comp.frameDuration;                            }                            						markersTime.push(marker.time);                        					}    }    return markersTime;}// GENERIC FUUNCTIONSfunction pad(num, size) {    var s = num+"";    while (s.length < size) s = "0" + s;    return s;}Array.prototype.contains = function(elem){for (var i in this){if (this[i] == elem) return true;}return false;}}function createFolder(path,fName){        var f= new Folder(path+fName+"/");        if (!f.exists)        f.create();    }